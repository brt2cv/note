{"root":{"data":{"text":"Python-Http服务器"},"children":[{"data":{"text":"FastAPI","expandState":"expand"},"children":[{"data":{"text":"概览","expandState":"collapse"},"children":[{"data":{"text":"如果用于生产，那么你还需要一个ASGI服务器，如Uvicorn或Hypercorn"}},{"data":{"text":"FastAPI的速度得益于使用了Starlette\n——一个轻量级的ASGI框架","note":"ASGI向后兼容WSGI——由于最新的HTTP协议支持异步长连接，而传统的WSGI应用支持单次同步调用，即仅在接受一个请求后返回响应，从而无法支持HTTP长轮询或WebSocket连接。"}},{"data":{"text":"Pydantic：数据验证"},"children":[{"data":{"text":"ujson: 更快的JSON"}},{"data":{"text":"email_validator: 电子邮件的验证"}}]},{"data":{"text":"基于API 的相关开放标准"},"children":[{"data":{"text":"OpenAPI (以前被称为 Swagger) "}},{"data":{"text":"JSON Schema"}}]}]},{"data":{"text":"语法","hyperlink":"https://www.cnblogs.com/traditional/p/14733610.html","hyperlinkTitle":"","expandState":"collapse","background":"#92d050"},"children":[{"data":{"text":"启动"},"children":[{"data":{"text":"命令：uvicorn main:app --port 8001 --reload"}},{"data":{"text":"代码","note":"```py\nimport uvicorn\n\nuvicorn.run(app, host=\"127.0.0.1\", port=8000)\n```"}},{"data":{"text":"交互式文档","note":"```py\napp = FastAPI(title=\"测试文档\", description=\"这是一个简单的 demo\",  docs_url=\"/my_docs\", openapi_url=\"/my_openapi\")\n```"}}]},{"data":{"text":"路由-参数"},"children":[{"data":{"text":"路由-装饰器","expandState":"collapse"},"children":[{"data":{"text":"@app.get()"}},{"data":{"text":"@app.post()"}},{"data":{"text":"@app.put()"}},{"data":{"text":"@app.delete()"}}]},{"data":{"text":"路由顺序"}},{"data":{"text":"参数","note":"按照API定义的**顺序**匹配","expandState":"expand","priority":2,"background":"#92d050"},"children":[{"data":{"text":"Enum","note":"class Name(str, Enum):\n    satori = \"古明地觉\"\n    koishi = \"古明地恋\"\n    marisa = \"雾雨魔理沙\""}},{"data":{"text":"Path转换器","note":"```\n@app.get(\"/files/{file_path:path}\")\ndef read_user_me(file_path):\n    return {\"file_path\": file_path}\n```"}},{"data":{"text":"第一个参数设置为 *","note":"使得 item_id 和 q 都必须通过关键字传递，所以此时默认参数在非默认参数之前也是允许的。\n@app.get(\"/items/{item-id}\")\nasync def read_items(*, item_id: int = Path(..., alias=\"item-id\"), q: str): pass"}},{"data":{"text":"参数校验"},"children":[{"data":{"text":"路径参数\nPath","note":"Path(  # noqa: N802\n    default: Any,                          # None为非必传参数，...为必传，指定值为默认\n    *,                                     # 如果传了*，则说明后面的参数全部为关键字参数\n    alias: str = None,                     # 别名，至前端传参时的参数名\n    title: str = None,                     # 说明\n    description: str = None,\n    gt: float = None,                      # 只对int/float格式的参数，gt：大于\n    ge: float = None,                      # ge ：大于等于\n    lt: float = None,                      # lt :小于\n    le: float = None,                      # le：小于等于\n    min_length: int = None,                # 只能用于str格式的参数，最小长度\n    max_length: int = None,                # 只能用于str格式的参数，最大长度\n    regex: str = None,                     # 只能用于str格式的参数，正则\n    deprecated: bool = None,\n    **extra: Any,\n)"}},{"data":{"text":"查询参数\nQuery","note":"password: Optional[str] = Query(..., min_length=6, max_length=15, regex=r\"^satori\")\n","expandState":"collapse"},"children":[{"data":{"text":"传入列表","note":"from typing import List\n\nparam: List[str] = Query(...)"}},{"data":{"text":"min_length"}},{"data":{"text":"max_length"}},{"data":{"text":"regex"}},{"data":{"text":"给参数起别名","note":"param: Optional[str] = Query(None, alias=\"item-query\")"}},{"data":{"text":"ge/gt/le/lt"}},{"data":{"text":"deprecated"}},{"data":{"text":"..."}}]},{"data":{"text":"Union[int, str]"}},{"data":{"text":"Optional[str] = None"}}]},{"data":{"text":"依赖注入：Depends","hyperlink":"https://www.cnblogs.com/traditional/p/14733610.html#Depends","hyperlinkTitle":"","progress":1}}]}]},{"data":{"text":"Request 对象","expandState":"expand"},"children":[{"data":{"text":"属性"},"children":[{"data":{"text":"headers"}},{"data":{"text":"method"}},{"data":{"text":"cookies"}},{"data":{"text":"query_params"}}]},{"data":{"text":"method"},"children":[{"data":{"text":"dict(r)"}},{"data":{"text":"r.body()"}},{"data":{"text":"r.json()"}}]}]},{"data":{"text":"Response 对象","expandState":"expand"},"children":[{"data":{"text":"属性"},"children":[{"data":{"text":"content"}},{"data":{"text":"status_code"}},{"data":{"text":"headers"}},{"data":{"text":"media_type：即 HTML 中的 Content-Type"}},{"data":{"text":"background"}}]},{"data":{"text":"子类","expandState":"expand"},"children":[{"data":{"text":"FileResponse"}},{"data":{"text":"HTMLResponse"}},{"data":{"text":"PlainTextResponse"}}]}]},{"data":{"text":"其他**请求体**","note":"显然对应 POST、PUT 等类型的请求，我们必须要能够解析出请求体，并且能够构造出响应体。"},"children":[{"data":{"text":"BaseModel","note":"from pydantic import BaseModel\n\nclass Girl(BaseModel):\n    name: str\n    age: Optional[int] = None"},"children":[{"data":{"text":"dict(model)"}}]},{"data":{"text":"Request"},"children":[{"data":{"text":"await request.body()"}},{"data":{"text":"await request.json()"}}]},{"data":{"text":"多个请求体参数"}},{"data":{"text":"Form 表单"},"children":[{"data":{"text":"Request：await request.form()"}},{"data":{"text":"from fastapi import Form"}}]},{"data":{"text":"文件上传"}}]},{"data":{"text":"静态文件路径","note":"```py\nfrom fastapi.staticfiles import StaticFiles\n\nstatic = StaticFiles(directory='./statics')  # 静态文件目录名称可以直接写‘statics’\napp.mount('/static', static, name='')  # 第一个参数是访问静态文件的uri，name的作用是方便反向解析\n```"}},{"data":{"text":"错误处理：HTTPException","expandState":"expand"},"children":[{"data":{"text":"自定义异常","note":"我们自定义完异常之后，还要定义一个 handler，将异常和 handler 绑定在一起，然后引发该异常的时候就会触发相应的 handler。"}},{"data":{"text":"自定义 404"}}]}]},{"data":{"text":"后台任务：BackgroundTasks"}},{"data":{"text":"APIRouter：处理多文件的prefix（子页面、模块）","note":"### app/app01.py\n```\nfrom fastapi import APIRouter\nrouter = APIRouter(prefix=\"/router\")\n...\n```\n### main.py\n将 router 注册到 app 中，相当于 Flask 中的 register_blueprint()：\n```\nfrom app.app01 import router\n\napp = FastAPI()\napp.include_router(router)\n```"}},{"data":{"text":"中间件","note":"通过自定义中间件，我们可以在不修改视图函数的情况下，实现功能的扩展。\n\n```\n@app.middleware(\"http\")\nasync def middleware(request: Request, call_next):\n    \"\"\"\n    定义一个协程函数，然后使用 @app.middleware(\"http\") 装饰，即可得到中间件\n    \"\"\"\n```","expandState":"collapse"},"children":[{"data":{"text":"请求中间件","note":"可以对请求进行一些预处理，或者实现一个拦截器等。"}},{"data":{"text":"响应中间件","note":"可以对响应进行一些润色。"}},{"data":{"text":"内置的中间件"},"children":[{"data":{"text":"HTTPSRedirectMiddleware","note":"要求请求协议必须是 https 或者 wss，如果不是，则自动跳转:\n```\nfrom starlette.middleware.httpsredirect import HTTPSRedirectMiddleware\napp.add_middleware(HTTPSRedirectMiddleware)\n```"}},{"data":{"text":"TrustedHostMiddleware","note":"请求中必须包含 Host 字段，为防止 HTTP 主机报头攻击，并且添加中间件的时候，还可以指定一个 allowed_hosts，那么它是干什么的呢？\n\n假设我们有服务 a.example.com、b.example.com、c.example.com，但我们不希望用户访问 c.example.com，就可以像下面这么设置，如果指定为 `[\"*\"]`，或者不指定 `allow_hosts`，则表示无限制:\n\n```\nfrom starlette.middleware.trustedhost import TrustedHostMiddleware\napp.add_middleware(TrustedHostMiddleware, allowed_hosts=[\"a.example.com\", \"b.example.com\"])\n```\n"}},{"data":{"text":"GZipMiddleware","note":"如果用户的请求头的 Accept-Encoding 字段包含 gzip，那么 FastAPI 会使用 GZip 算法压缩.\n\nminimum_size=1000 表示当大小不超过 1000 字节的时候就不压缩了\n\n```\nfrom starlette.middleware.gzip import GZipMiddleware\napp.add_middleware(TrustedHostMiddleware, minimum_size=1000)\n```"}}]},{"data":{"text":"CORS（跨域资源共享）","hyperlink":"https://www.cnblogs.com/traditional/p/14733610.html#CORS","hyperlinkTitle":"","note":"```\nfrom fastapi.middleware.cors import CORSMiddleware\n\napp.add_middleware(\n    CORSMiddleware,\n    # 允许跨域的源列表，例如 [\"http://www.example.org\"] 等等，[\"*\"] 表示允许任何源\n    allow_origins=[\"*\"],\n    # 跨域请求是否支持 cookie，默认是 False，如果为 True，allow_origins 必须为具体的源，不可以是 [\"*\"]\n    allow_credentials=False,\n    # 允许跨域请求的 HTTP 方法列表，默认是 [\"GET\"]\n    allow_methods=[\"*\"],\n    # 允许跨域请求的 HTTP 请求头列表，默认是 []，可以使用 [\"*\"] 表示允许所有的请求头\n    # 当然 Accept、Accept-Language、Content-Language 以及 Content-Type 总之被允许的\n    allow_headers=[\"*\"],\n    # 可以被浏览器访问的响应头, 默认是 []，一般很少指定\n    # expose_headers=[\"*\"]\n    # 设定浏览器缓存 CORS 响应的最长时间，单位是秒。默认为 600，一般也很少指定\n    # max_age=1000\n)\n```"}}]},{"data":{"text":"高阶操作"},"children":[{"data":{"text":"重定向","note":"from fastapi.responses import RedirectResponse\n\n@app.get(\"/index\")\nasync def index():\n    return RedirectResponse(\"https://www.bilibili.com\")"}},{"data":{"text":"字节流"}},{"data":{"text":"HTTP 验证\n(输入用户名密码)","note":"```\nfrom fastapi.security import HTTPBasic, HTTPBasicCredentials\n\nsecurity = HTTPBasic()\n\nasync def index(credentials: HTTPBasicCredentials = Depends(security)):\n    return {\"username\": credentials.username, \"password\": credentials.password}\n```\n\n当用户访问 /index 的时候，会提示输入用户名和密码。"}},{"data":{"text":"websocket"}}]},{"data":{"text":"服务部署（参数讲解）","expandState":"collapse"},"children":[{"data":{"text":"debug：是否开启 debug 模式"}},{"data":{"text":"reload：是否自动重启"}},{"data":{"text":"workers：工作进程数"}},{"data":{"text":"limit_concurrency：并发的最大数量"}},{"data":{"text":"limit_max_requests：能 hold 住的最大请求数"}},{"data":{"text":"..."}}]}]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}